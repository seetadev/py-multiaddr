name: Claude AI README Generator

on:
  workflow_dispatch:
    inputs:
      include_detailed_structure:
        description: "Include detailed project structure"
        required: false
        default: true
        type: boolean
      include_tech_analysis:
        description: "Include comprehensive tech stack analysis"
        required: false
        default: true
        type: boolean
      update_existing:
        description: "Update existing README if it exists"
        required: false
        default: true
        type: boolean

jobs:
  generate-readme:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check and handle existing claude-readme branch
        id: check-branch
        run: |
          if git ls-remote --heads origin claude-readme | grep -q claude-readme; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Branch 'claude-readme' already exists!"
            echo "üóëÔ∏è Automatically deleting existing branch..."
            git push origin --delete claude-readme || echo "Branch deletion failed, but continuing..."
            echo "‚úÖ Existing branch deleted. Proceeding with README generation."
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Branch 'claude-readme' does not exist. Proceeding with README generation."
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          # Install Python dependencies
          pip install boto3 requests botocore PyGithub

          # Install GitHub CLI as backup for PR creation
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

          # Install additional tools for analysis
          sudo apt install -y tree file

      - name: Analyze project structure and files
        run: |
          echo "üîç Analyzing project structure and files..."

          # Create comprehensive file inventory
          find . -type f \( \
            -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o \
            -name "*.css" -o -name "*.scss" -o -name "*.json" -o -name "*.md" -o \
            -name "*.yml" -o -name "*.yaml" -o -name "*.toml" -o -name "*.xml" -o \
            -name "*.html" -o -name "*.svg" -o -name "*.png" -o -name "*.jpg" -o \
            -name "*.ico" -o -name "*.txt" -o -name "Dockerfile*" -o -name "*.sh" \
          \) \
            -not -path "./node_modules/*" \
            -not -path "./.git/*" \
            -not -path "./dist/*" \
            -not -path "./build/*" \
            -not -path "./coverage/*" > all_files.txt

          echo "üìÅ Found $(wc -l < all_files.txt) files to analyze"

          # Generate project tree structure
          echo "Project Directory Structure:" > project_tree.txt
          echo "============================" >> project_tree.txt
          tree -I 'node_modules|.git|dist|build|coverage|.next|.vscode|.idea' -L 4 >> project_tree.txt 2>/dev/null || find . -type d -not -path "./node_modules*" -not -path "./.git*" -not -path "./dist*" -not -path "./build*" | head -50 >> project_tree.txt

          # Analyze key configuration files
          echo "Configuration Files Analysis:" > config_files.txt
          echo "=============================" >> config_files.txt

          # List of important config files to analyze
          config_files=(
            "package.json"
            "tsconfig.json"
            "vite.config.ts"
            "vite.config.js"
            "capacitor.config.ts"
            "capacitor.config.js"
            "ionic.config.json"
            ".eslintrc.json"
            ".eslintrc.js"
            "webpack.config.js"
            "docker-compose.yml"
            "Dockerfile"
            "README.md"
            "LICENSE"
            ".gitignore"
            "pwa-assets.config.ts"
            "manifest.json"
          )

          for file in "${config_files[@]}"; do
            if [ -f "$file" ]; then
              echo "=== $file ===" >> config_files.txt
              head -50 "$file" >> config_files.txt
              echo "" >> config_files.txt
            fi
          done

          # Analyze source code structure
          echo "Source Code Analysis:" > source_analysis.txt
          echo "=====================" >> source_analysis.txt

          # Count different file types
          echo "File Type Distribution:" >> source_analysis.txt
          echo "TypeScript files: $(find . -name "*.ts" -not -path "./node_modules/*" | wc -l)" >> source_analysis.txt
          echo "TypeScript React files: $(find . -name "*.tsx" -not -path "./node_modules/*" | wc -l)" >> source_analysis.txt
          echo "JavaScript files: $(find . -name "*.js" -not -path "./node_modules/*" | wc -l)" >> source_analysis.txt
          echo "JavaScript React files: $(find . -name "*.jsx" -not -path "./node_modules/*" | wc -l)" >> source_analysis.txt
          echo "CSS/SCSS files: $(find . -name "*.css" -o -name "*.scss" -not -path "./node_modules/*" | wc -l)" >> source_analysis.txt
          echo "JSON files: $(find . -name "*.json" -not -path "./node_modules/*" | wc -l)" >> source_analysis.txt
          echo "Markdown files: $(find . -name "*.md" -not -path "./node_modules/*" | wc -l)" >> source_analysis.txt
          echo "" >> source_analysis.txt

          # Analyze directory structure
          echo "Main Directories:" >> source_analysis.txt
          find . -maxdepth 2 -type d -not -path "./node_modules*" -not -path "./.git*" | sort >> source_analysis.txt

      - name: Generate README with Claude AI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_BEDROCK_MODEL_ID: ${{ secrets.AWS_BEDROCK_MODEL_ID }}
          INCLUDE_DETAILED_STRUCTURE: ${{ github.event.inputs.include_detailed_structure }}
          INCLUDE_TECH_ANALYSIS: ${{ github.event.inputs.include_tech_analysis }}
          UPDATE_EXISTING: ${{ github.event.inputs.update_existing }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          TARGET_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          cat << 'EOF' > claude_readme_generator.py
          import boto3
          import json
          import os
          import subprocess
          import time
          import random
          from datetime import datetime
          from botocore.config import Config
          from github import Github
          import re

          class ClaudeReadmeGenerator:
              def __init__(self):
                  self.github_token = os.environ['GITHUB_TOKEN']
                  self.bedrock_client = self.get_bedrock_client()
                  self.model_id = os.environ.get('AWS_BEDROCK_MODEL_ID', 'us.anthropic.claude-3-5-sonnet-20241022-v2:0')
                  self.include_detailed_structure = os.environ.get('INCLUDE_DETAILED_STRUCTURE', 'true').lower() == 'true'
                  self.include_tech_analysis = os.environ.get('INCLUDE_TECH_ANALYSIS', 'true').lower() == 'true'
                  self.update_existing = os.environ.get('UPDATE_EXISTING', 'true').lower() == 'true'
                  self.repo_owner = os.environ['REPO_OWNER']
                  self.repo_name = os.environ['REPO_NAME']
                  self.target_branch = os.environ.get('TARGET_BRANCH', 'main')
                  self.branch_name = "claude-readme"
                  
              def get_bedrock_client(self):
                  config = Config(
                      read_timeout=300,
                      connect_timeout=10,
                      retries={
                          'max_attempts': 5,
                          'mode': 'adaptive'
                      }
                  )
                  return boto3.client('bedrock-runtime', region_name=os.environ['AWS_DEFAULT_REGION'], config=config)

              def read_file_safely(self, filepath, max_lines=200):
                  """Read file content safely, limiting lines for context"""
                  try:
                      with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                          lines = f.readlines()
                          if len(lines) > max_lines:
                              return ''.join(lines[:max_lines]) + f'\n... (truncated, {len(lines)-max_lines} more lines)'
                          return ''.join(lines)
                  except Exception as e:
                      return f"Error reading file: {str(e)}"

              def analyze_project_context(self):
                  """Analyze the project structure and files for README generation"""
                  print("üìä Analyzing project context...")
                  
                  context = {
                      'project_tree': '',
                      'config_files': '',
                      'source_analysis': '',
                      'key_files_content': {},
                      'sample_source_files': {},
                      'file_stats': {}
                  }
                  
                  # Read project tree structure
                  if os.path.exists('project_tree.txt'):
                      context['project_tree'] = self.read_file_safely('project_tree.txt', 150)
                  
                  # Read configuration files analysis
                  if os.path.exists('config_files.txt'):
                      context['config_files'] = self.read_file_safely('config_files.txt', 300)
                  
                  # Read source code analysis
                  if os.path.exists('source_analysis.txt'):
                      context['source_analysis'] = self.read_file_safely('source_analysis.txt', 100)
                  
                  # Read all files list
                  all_files = []
                  if os.path.exists('all_files.txt'):
                      with open('all_files.txt', 'r') as f:
                          all_files = [line.strip() for line in f.readlines() if line.strip()]
                  
                  # Sample key source files for understanding project structure
                  key_patterns = [
                      r'src/App\.(tsx?|jsx?)$',
                      r'src/main\.(tsx?|jsx?)$',
                      r'src/index\.(tsx?|jsx?)$',
                      r'src/.*[Pp]age.*\.(tsx?|jsx?)$',
                      r'src/.*[Cc]omponent.*\.(tsx?|jsx?)$',
                      r'src/.*[Ss]ervice.*\.(tsx?|jsx?)$',
                      r'src/.*[Uu]til.*\.(tsx?|jsx?)$',
                      r'src/.*[Hh]ook.*\.(tsx?|jsx?)$',
                      r'src/.*[Cc]ontext.*\.(tsx?|jsx?)$',
                  ]
                  
                  sampled_files = []
                  for pattern in key_patterns:
                      for file_path in all_files:
                          if re.search(pattern, file_path, re.IGNORECASE) and len(sampled_files) < 15:
                              sampled_files.append(file_path)
                  
                  # Add some additional important files
                  for file_path in all_files[:10]:
                      if len(sampled_files) < 20 and file_path not in sampled_files:
                          sampled_files.append(file_path)
                  
                  # Read content of sampled files
                  for file_path in sampled_files:
                      if os.path.exists(file_path):
                          context['sample_source_files'][file_path] = self.read_file_safely(file_path, 100)
                  
                  # Calculate file statistics
                  context['file_stats'] = {
                      'total_files': len(all_files),
                      'typescript_files': len([f for f in all_files if f.endswith(('.ts', '.tsx'))]),
                      'javascript_files': len([f for f in all_files if f.endswith(('.js', '.jsx'))]),
                      'css_files': len([f for f in all_files if f.endswith(('.css', '.scss'))]),
                      'config_files': len([f for f in all_files if f.endswith(('.json', '.yml', '.yaml', '.toml'))]),
                      'image_files': len([f for f in all_files if f.endswith(('.png', '.jpg', '.jpeg', '.svg', '.ico'))]),
                  }
                  
                  print(f"‚úÖ Analyzed {len(all_files)} files and sampled {len(sampled_files)} key files")
                  return context

              def generate_readme_with_claude(self, project_context):
                  """Generate comprehensive README using Claude"""
                  
                  readme_prompt = f"""
          You are an expert technical writer and software architect. You need to create a comprehensive, professional README.md file for a software project based on the provided project analysis.

          ## PROJECT ANALYSIS DATA

          **Repository:** {self.repo_owner}/{self.repo_name}
          **Analysis Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

          ### File Statistics
          - Total files: {project_context['file_stats']['total_files']}
          - TypeScript files: {project_context['file_stats']['typescript_files']}
          - JavaScript files: {project_context['file_stats']['javascript_files']}
          - CSS/Style files: {project_context['file_stats']['css_files']}
          - Configuration files: {project_context['file_stats']['config_files']}
          - Image/Asset files: {project_context['file_stats']['image_files']}

          ### Project Directory Structure
          ```
          {project_context['project_tree']}
          ```

          ### Configuration Files Analysis
          {project_context['config_files']}

          ### Source Code Analysis
          {project_context['source_analysis']}

          ### Sample Source Files
          """
                  
                  # Add sample source files
                  for file_path, content in project_context['sample_source_files'].items():
                      readme_prompt += f"\n**{file_path}:**\n```\n{content[:1000]}\n```\n"
                  
                  readme_prompt += """

          ## README GENERATION INSTRUCTIONS

          Based on the provided project analysis, create a comprehensive and professional README.md file. The README should be well-structured, informative, and follow modern documentation standards.

          **REQUIRED SECTIONS:**

          # [Project Name]

          [Brief, compelling project description - 2-3 sentences explaining what this project does]

          ## üöÄ Features

          [List key features and capabilities based on code analysis]

          ## üõ†Ô∏è Tech Stack

          [Comprehensive technology stack analysis based on configuration files and dependencies]

          ### Frontend
          - [List frontend technologies]

          ### Backend/Services  
          - [List backend technologies if any]

          ### Development Tools
          - [List development and build tools]

          ### Mobile/Desktop
          - [List mobile/desktop technologies if applicable]

          ## üìÅ Project Structure

          [Explain the main directories and their purposes]

          ## üîß Installation & Setup

          ### Prerequisites
          [List required software/tools]

          ### Installation Steps
          ```bash
          # Step-by-step installation commands
          ```

          ## üéØ Usage

          ### Development
          ```bash
          # Commands to run in development
          ```

          ### Production
          ```bash
          # Commands to build and run in production
          ```

          ### Mobile Development
          [If applicable, include mobile-specific instructions]

          ## üì± Platform Support

          [List supported platforms based on configuration]

          ## üß™ Testing

          [Include testing instructions if test files are found]

          ## üîÑ Deployment

          [Include deployment information based on configuration files]

          ## üìä Performance & Optimization

          [Include performance considerations if applicable]

          ## ü§ù Contributing

          We welcome contributions! Please follow these guidelines:

          1. Fork the repository
          2. Create a feature branch (`git checkout -b feature/amazing-feature`)
          3. Commit your changes (`git commit -m 'Add some amazing feature'`)
          4. Push to the branch (`git push origin feature/amazing-feature`)
          5. Open a Pull Request

          ### Development Guidelines
          [Include specific guidelines based on project structure]

          ## üìÑ License

          [Include license information if LICENSE file is found, otherwise suggest appropriate license]

          ## üôè Acknowledgments

          [Include acknowledgments section]

          ## üìû Support & Contact

          [Include support information]

          ---

          ## IMPORTANT INSTRUCTIONS:

          1. **Be Specific**: Use actual technologies, frameworks, and tools found in the project
          2. **Accurate Commands**: Provide correct installation and run commands based on package.json and configuration files
          3. **Real Features**: Derive features from actual code structure and components found
          4. **Professional Tone**: Write in a clear, professional, and engaging manner
          5. **Complete Information**: Ensure all sections are properly filled with relevant content
          6. **Modern Formatting**: Use proper markdown formatting, emojis, and code blocks
          7. **Actionable Content**: Provide specific, actionable instructions

          The README should be comprehensive enough that a new developer can understand the project and get it running without additional documentation.
          """
                  
                  return self.generate_with_retry(readme_prompt)

              def generate_with_retry(self, prompt, max_retries=10):
                  """Generate README with retry logic"""
                  print("ü§ñ Generating README with Claude AI...")
                  print(f"üìù Prompt length: {len(prompt):,} characters")
                  print(f"üéØ Using model: {self.model_id}")
                  print("=" * 80)
                  
                  for attempt in range(max_retries):
                      try:
                          print(f"üöÄ Attempt {attempt + 1}/{max_retries}")
                          
                          body = {
                              "anthropic_version": "bedrock-2023-05-31",
                              "max_tokens": 15000,
                              "messages": [
                                  {
                                      "role": "user",
                                      "content": prompt
                                  }
                              ]
                          }
                          
                          start_time = time.time()
                          response = self.bedrock_client.invoke_model(
                              body=json.dumps(body),
                              modelId=self.model_id,
                              accept='application/json',
                              contentType='application/json'
                          )
                          
                          response_body = json.loads(response.get('body').read())
                          readme_content = response_body['content'][0]['text']
                          
                          end_time = time.time()
                          generation_time = end_time - start_time
                          
                          print(f"‚úÖ README generated in {generation_time:.2f} seconds!")
                          print(f"üìä Content length: {len(readme_content):,} characters")
                          print("=" * 80)
                          
                          return readme_content
                          
                      except Exception as e:
                          error_str = str(e)
                          print(f"‚ùå Attempt {attempt + 1} failed: {error_str}")
                          
                          if attempt < max_retries - 1:
                              delay = min(2 ** attempt + random.uniform(0, 1), 60)
                              print(f"‚è≥ Waiting {delay:.2f} seconds before retry...")
                              time.sleep(delay)
                          else:
                              print("‚ùå All retry attempts exhausted")
                              return None
                  
                  return None

              def save_readme(self, readme_content):
                  """Save README to the appropriate location"""
                  print("üíæ Saving README...")
                  
                  # Create .github/claude directory if it doesn't exist
                  os.makedirs('.github/claude', exist_ok=True)
                  
                  # Save the README
                  readme_file_path = '.github/claude/readme.md'
                  with open(readme_file_path, 'w', encoding='utf-8') as f:
                      f.write(readme_content)
                  
                  print(f"‚úÖ README saved to {readme_file_path}")
                  return readme_file_path

              def create_branch_and_commit(self, readme_file_path):
                  """Create branch and commit README"""
                  try:
                      print(f"üåø Creating branch: {self.branch_name}")
                      
                      # Configure git
                      subprocess.run(['git', 'config', 'user.name', 'Claude README Generator'], check=True)
                      subprocess.run(['git', 'config', 'user.email', 'claude-readme@github-actions.bot'], check=True)
                      
                      # Create and checkout new branch
                      subprocess.run(['git', 'checkout', '-b', self.branch_name], check=True)
                      
                      # Add the README
                      subprocess.run(['git', 'add', readme_file_path], check=True)
                      
                      # Create commit message
                      commit_msg = f"""üìù Generate comprehensive README with Claude AI

          Auto-generated project documentation by Claude AI

          Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          README Location: {readme_file_path}

          This README includes:
          üìã Project overview and features
          üõ†Ô∏è Complete tech stack analysis
          üìÅ Project structure documentation
          üîß Installation and setup instructions
          üéØ Usage guidelines
          ü§ù Contribution guidelines
          """
                      
                      # Commit changes
                      subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
                      
                      # Push branch
                      subprocess.run(['git', 'push', '-u', 'origin', self.branch_name], check=True)
                      
                      print(f"‚úÖ Successfully pushed README to branch: {self.branch_name}")
                      return True
                      
                  except subprocess.CalledProcessError as e:
                      print(f"‚ùå Git operation failed: {e}")
                      return False

              def create_pull_request(self, readme_file_path):
                  """Create pull request for README"""
                  try:
                      print("üìù Creating pull request...")
                      
                      github_client = Github(self.github_token)
                      
                      # Create PR in the current repository only
                      target_repo_obj = github_client.get_repo(f"{self.repo_owner}/{self.repo_name}")
                      head_ref = self.branch_name
                      base_ref = self.target_branch
                      print(f"üì¶ Creating PR: {head_ref} -> {base_ref}")
                      
                      pr_title = f"üìù Claude AI Generated README - {datetime.now().strftime('%Y-%m-%d')}"
                      
                      pr_body = f"""# üìù Claude AI Generated README

          This pull request contains a comprehensive README.md file automatically generated by Claude AI based on project analysis.

          ## üìã README Details
          - **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          - **Location:** `{readme_file_path}`
          - **Analysis Scope:** Complete project structure and configuration

          ## üìñ What's Included

          ‚úÖ **Project Overview** - Clear description and purpose
          ‚úÖ **Features List** - Key capabilities and functionality
          ‚úÖ **Tech Stack** - Complete technology analysis
          ‚úÖ **Project Structure** - Directory organization explanation
          ‚úÖ **Installation Guide** - Step-by-step setup instructions
          ‚úÖ **Usage Instructions** - Development and production commands
          ‚úÖ **Contributing Guidelines** - How to contribute to the project
          ‚úÖ **License Information** - Project licensing details

          ## üîç Analysis Summary

          - **Total Files Analyzed:** {self.repo_name} project structure
          - **Configuration Files:** package.json, tsconfig.json, capacitor.config.ts, etc.
          - **Source Code:** React/Ionic TypeScript components and services
          - **Build Tools:** Vite, Capacitor, and modern toolchain

          ## üìù Review Notes

          - This README was generated using AI analysis of the entire codebase
          - Please review the content for accuracy and completeness
          - Feel free to edit or enhance any sections as needed
          - The README follows modern documentation standards

          ## üîÑ Next Steps

          1. **Review** the generated README content
          2. **Verify** technical details and instructions
          3. **Customize** any project-specific information
          4. **Merge** when satisfied with the documentation

          ---
          *Generated automatically by Claude AI README Generator ü§ñ*
          """
                      
                      # Try to create PR using PyGithub first
                      try:
                          pull_request = target_repo_obj.create_pull(
                              title=pr_title,
                              body=pr_body,
                              head=head_ref,
                              base=base_ref
                          )
                          
                          # Add labels
                          try:
                              pull_request.add_to_labels('documentation', 'claude-generated', 'readme')
                          except:
                              pass  # Labels might not exist
                          
                          print(f"‚úÖ Pull request created: {pull_request.html_url}")
                          return pull_request.html_url
                      except Exception as pr_error:
                          if "not permitted" in str(pr_error) or "403" in str(pr_error):
                              print("‚ö†Ô∏è GitHub Actions cannot create PRs directly. Using GitHub CLI fallback...")
                              
                              # Try using GitHub CLI
                              try:
                                  cli_args = [
                                      'gh', 'pr', 'create',
                                      '--title', pr_title,
                                      '--body', pr_body,
                                      '--head', head_ref,
                                      '--base', base_ref
                                  ]
                                  
                                  result = subprocess.run(cli_args, capture_output=True, text=True, check=True)
                                  
                                  pr_url = result.stdout.strip()
                                  print(f"‚úÖ Pull request created via GitHub CLI: {pr_url}")
                                  return pr_url
                              except subprocess.CalledProcessError as cli_error:
                                  print(f"‚ùå GitHub CLI also failed: {cli_error}")
                                  
                                  # Final fallback - create a summary file instead
                                  print("üìù Creating README summary instead of PR...")
                                  summary_path = self.create_readme_summary(readme_file_path)
                                  print(f"‚úÖ README summary created: {summary_path}")
                                  print("üí° You can manually create a PR from the claude-readme branch")
                                  return f"Branch: {self.branch_name} (manual PR needed)"
                          else:
                              raise pr_error
                      
                  except Exception as e:
                      print(f"‚ùå Failed to create pull request: {e}")
                      # Create summary as fallback
                      summary_path = self.create_readme_summary(readme_file_path)
                      print(f"‚úÖ README summary created instead: {summary_path}")
                      return None

              def create_readme_summary(self, readme_file_path):
                  """Create a summary file when PR creation fails"""
                  summary_content = f"""# üìù Claude AI README Generation Summary

          **Generation Completed:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          **Branch:** {self.branch_name}
          **README Location:** {readme_file_path}

          ## üìã What Was Generated

          A comprehensive README.md file has been created with the following sections:
          - Project overview and description
          - Features and capabilities
          - Complete tech stack analysis
          - Project structure explanation
          - Installation and setup instructions
          - Usage guidelines
          - Contributing guidelines
          - License information

          ## üîÑ Next Steps

          1. **View the generated README:** `{readme_file_path}`
          2. **Create a Pull Request manually:**
             - Go to your repository on GitHub
             - Switch to the `{self.branch_name}` branch
             - Click "Create Pull Request"
          3. **Review and customize** the README content as needed

          ## üîó Quick Links

          - **Branch:** [{self.branch_name}](https://github.com/{self.repo_owner}/{self.repo_name}/tree/{self.branch_name})
          - **README File:** [{readme_file_path}](https://github.com/{self.repo_owner}/{self.repo_name}/blob/{self.branch_name}/{readme_file_path})

          ---
          *Generated by Claude AI README Generator*
          """
                  
                  summary_path = 'README_GENERATION_SUMMARY.md'
                  with open(summary_path, 'w', encoding='utf-8') as f:
                      f.write(summary_content)
                  
                  # Add and commit the summary
                  try:
                      subprocess.run(['git', 'add', summary_path], check=True)
                      subprocess.run(['git', 'commit', '-m', 'Add README generation summary'], check=True)
                      subprocess.run(['git', 'push'], check=True)
                  except:
                      pass
                  
                  return summary_path

              def run_generation(self):
                  """Main README generation execution method"""
                  print("üìù Starting Claude AI README Generation...")
                  print(f"üìÅ Detailed structure: {self.include_detailed_structure}")
                  print(f"üî¨ Tech analysis: {self.include_tech_analysis}")
                  print(f"üîÑ Update existing: {self.update_existing}")
                  print("=" * 80)
                  
                  # Step 1: Analyze project context
                  project_context = self.analyze_project_context()
                  
                  # Step 2: Generate README with Claude
                  readme_content = self.generate_readme_with_claude(project_context)
                  
                  if not readme_content:
                      print("‚ùå Failed to generate README")
                      return False
                  
                  # Step 3: Save README
                  readme_file_path = self.save_readme(readme_content)
                  
                  # Step 4: Create branch and commit
                  if self.create_branch_and_commit(readme_file_path):
                      # Step 5: Create pull request
                      pr_url = self.create_pull_request(readme_file_path)
                      
                      if pr_url:
                          print("=" * 80)
                          print("üéâ README generation completed successfully!")
                          print(f"üìÑ README: {readme_file_path}")
                          print(f"üîó Pull Request: {pr_url}")
                          print("=" * 80)
                          return True
                      else:
                          print("=" * 80)
                          print("üéâ README generation completed successfully!")
                          print(f"üìÑ README: {readme_file_path}")
                          print(f"üåø Branch: {self.branch_name}")
                          print("üí° Create a pull request manually from the GitHub interface")
                          print("=" * 80)
                          return True  # Still consider this successful
                  else:
                      print("‚ùå Failed to create branch and commit README")
                      return False

          if __name__ == "__main__":
              generator = ClaudeReadmeGenerator()
              success = generator.run_generation()
              exit(0 if success else 1)
          EOF

          python claude_readme_generator.py

      - name: Summary
        if: always()
        run: |
          echo "üìù Claude AI README Generator Summary"
          echo "===================================="
          echo "Detailed Structure: ${{ github.event.inputs.include_detailed_structure }}"
          echo "Tech Analysis: ${{ github.event.inputs.include_tech_analysis }}"
          echo "Update Existing: ${{ github.event.inputs.update_existing }}"
          echo "Branch: claude-readme"
          echo "README Location: .github/claude/readme.md"
          echo ""
          echo "üìñ The README includes:"
          echo "  üìã Comprehensive project overview and features"
          echo "  üõ†Ô∏è Complete tech stack analysis"
          echo "  üìÅ Project structure documentation"
          echo "  üîß Installation and setup instructions"
          echo "  üéØ Usage guidelines for development and production"
          echo "  ü§ù Contributing guidelines and standards"
          echo ""
          echo "üìÑ Check the pull request for the generated README documentation!"
